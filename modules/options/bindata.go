// Code generated by go-bindata.
// sources:
// langs/locale_en-us.ini
// langs/locale_zh-cn.ini
// DO NOT EDIT!

// +build bindata

package options

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _OptionsLangsLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6e\x1b\x3d\x0c\xdd\xeb\x14\xcc\xe2\xdb\x7d\xe8\x01\x0c\x78\x91\xc4\x01\x5a\xa0\x48\x8a\xfe\x20\x4b\x41\x96\x38\xb6\x50\x0d\x39\x91\x34\x71\x7d\x95\x9e\xa5\x77\xea\x15\x0a\x6a\x34\x7f\x71\xeb\xd5\x50\xe4\x23\xe7\x3d\x8a\x62\xc2\x9c\x3d\x1d\x12\x6c\xe1\x4b\x35\x55\xe0\x03\xf7\x19\xb6\xf0\xb1\x18\x72\xf6\xa4\xc9\xb4\x38\xf8\x3c\xc1\xa3\x69\x71\xe1\xd7\x47\x4f\x92\xf0\x29\xa0\x49\x08\x9e\xba\x3e\x43\x09\x83\x84\x55\x67\x52\x3a\x71\x74\x02\xa9\xa6\xb2\xa6\xcb\xf6\x68\x60\x0b\xf7\x83\x35\xa1\xae\x54\x1b\x21\x2a\x62\x8b\xed\x1e\xa3\x16\x0f\x6c\xe1\x73\x3d\xcf\x88\x21\xa1\x12\x56\x47\x2e\xec\xdf\x73\x8b\xca\x38\xa7\xdd\x5e\xa7\xde\x5a\x2c\xc9\xb7\xce\x81\x33\xd9\xec\xe5\x77\xd5\xdd\xf4\x21\x9c\x6f\x54\xcb\xce\x37\x67\xe9\x8e\x79\x45\x65\x0d\x59\x0c\x85\xb2\x18\xca\x61\x58\x57\xda\x61\xc0\x8c\xff\x2a\x86\x3f\xd0\xf6\x59\x78\x3c\x0c\x96\x3a\x61\xb0\x03\xb3\xe7\x6a\x65\x86\x3e\x21\xec\xee\x9e\x71\xaf\x92\x79\xc5\xf1\xdf\x18\x45\x6c\x34\x6d\x69\xa2\x7c\x31\x46\x8e\xc5\x2f\x8a\x1a\xe3\x03\xba\xb7\x6a\x06\xef\x8d\x72\xfb\xf1\x02\xe5\xea\x36\x72\xce\xe7\x4e\xce\xbb\x3b\xf8\x7a\xee\x70\xa3\x88\xb5\xa4\x09\x84\x4b\x01\x91\x87\x85\xee\x20\x4b\x71\x87\xd1\x64\xcf\xd2\xd6\xa7\xd1\x56\x26\x48\x13\xe4\xc7\x21\xc0\xae\xfe\x38\xd5\x2e\x57\x3e\xa3\x5b\xa1\xf3\x72\xb5\x0f\xce\x67\xc5\xc1\xe9\xc5\x64\x3c\x05\x37\x4d\xc7\xef\x5f\x3f\x15\xe1\x69\x19\x7e\xc4\xd3\x2a\x6c\x9b\x76\x19\xbe\xe7\xc6\xc7\x76\x85\x28\x83\xa3\x67\xe5\xab\x79\x9a\x3a\x54\x06\x74\x3c\x69\xcb\x44\x29\xc7\x52\x90\x08\x6d\x51\x9b\x72\xf4\x74\xd8\xcc\xa8\x23\x27\x51\xb1\x9b\xae\x19\xe3\x2b\xc6\x05\xa0\xe3\x98\xcb\x93\x12\x3f\xc8\x69\x11\xec\x13\xc6\x4a\xe9\x5b\xc2\x58\x18\x2c\xc2\x6e\x5f\x83\xbb\x25\xc5\x65\xf1\xcb\xd7\xb4\xb9\x50\xf0\xd7\x47\x34\x89\xb6\x6f\xc5\xad\xb5\x5d\x4f\x1e\xd4\xae\xc5\x5e\xcf\x10\xc4\xa5\xfe\xeb\x39\xfd\xd8\x9a\xb7\x9d\xb9\x9e\xb6\xce\xb8\xba\x52\x66\x7a\xe3\xce\x30\x4d\x83\x36\xa3\xd3\x0e\x93\x9d\x9e\xa9\x74\xa9\xf1\xe4\xd3\x11\xdd\xff\xf0\x9f\x83\x88\x96\xa3\x4b\x30\xc2\xdf\xd5\x55\x98\x7d\x0e\x75\x47\xc2\x07\x9a\xf7\x19\x71\xd6\xf8\x02\x5b\x69\x7b\x99\xd2\xe9\x06\x7d\x02\xe2\x0c\xf8\xd2\x9b\x20\x4f\x9f\xf0\x34\xb3\xe1\xe8\xf5\xaa\x86\xe5\x18\xd1\x8a\x0e\x0e\xee\xa2\x48\x8d\xa2\x53\x3d\x7d\x27\x3e\x91\x2e\x0b\x02\xb6\x50\xcf\x75\x61\x4c\x25\xed\xd1\xd0\x01\x17\xdb\x6b\x9c\x26\x18\x22\x4e\xa0\x05\x39\x16\xba\xb5\x96\x7b\xca\xc0\xf3\x9e\xad\x45\xeb\x36\x9f\x90\x75\xa7\xd7\xe8\x9f\x00\x00\x00\xff\xff\xab\xd3\x15\x44\x66\x06\x00\x00")

func OptionsLangsLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_OptionsLangsLocale_enUsIni,
		"langs/locale_en-us.ini",
	)
}

func OptionsLangsLocale_enUsIni() (*asset, error) {
	bytes, err := OptionsLangsLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "langs/locale_en-us.ini", size: 1638, mode: os.FileMode(420), modTime: time.Unix(1490669442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _OptionsLangsLocale_zhCnIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x6e\xda\x4a\x18\xdd\xcf\x53\x78\x73\x1f\x83\xcd\xd5\xdd\xdc\x5d\x77\x5d\x5a\x83\x3d\x04\xab\xc6\x43\xed\xa1\x34\x3b\x12\xa9\x09\xa1\x10\xa8\x42\x48\x88\xc8\x0f\x0d\x10\x94\x12\x43\xaa\xb4\xd0\x24\x84\x87\xa9\x67\x6c\x56\x79\x85\x6a\xc6\x06\xdb\x20\xa4\x2e\xed\x73\xbe\x9f\x73\x66\xe6\x58\x88\x10\xcd\xd8\xb2\xa4\x84\xe4\xd9\x2f\xee\xd4\x06\x3a\xde\xc2\x39\x22\x25\xa4\x79\xa1\x40\xf7\x1f\xf9\xb7\x66\xc8\x06\xcc\x20\x29\x21\xb9\xf5\x3e\x2b\x8e\x69\xad\x12\xf9\x2d\xa7\x35\x83\xf3\xbd\xe1\xd8\x7b\x39\xa2\x9f\xba\x21\x29\x0b\x2d\x2b\x8f\x4d\x55\x4a\x48\x74\xb8\xe7\x5e\xed\x00\x05\x66\x89\x92\x86\xbc\xfd\x6d\xd9\x1b\xee\xf0\x7f\x0b\xd6\x5a\xa3\xa0\xc6\x44\x19\x94\x49\x22\x53\xe6\x44\xb1\xe8\xc8\x99\x56\x03\x50\xec\xc1\x37\x6b\x3e\xcd\x9b\x7b\x20\x8d\xc5\x9e\xf3\x5e\x63\xde\xfe\x01\xa0\xaa\xca\x6a\x52\xb6\x72\x8a\x82\x44\x29\x1b\x3f\xd1\xd2\x15\x2b\xd6\x68\xe9\x12\x64\xb0\xaa\xa5\xb6\xa5\x84\xe4\xcc\x6c\x56\xff\x05\x14\x68\x28\x48\xe7\xbb\x56\x1b\xec\x67\x11\xa8\x48\x8f\x57\xd3\xe2\xd5\xbc\xd9\x09\xaa\xd1\x47\xa4\xe4\x08\x1f\xc6\x0e\x6e\xbc\x76\x19\xe4\x91\xae\xf8\xd3\xd9\xe0\xab\x37\x3b\x74\xa6\x33\xb7\xde\xff\xef\xdf\xb7\x28\x09\x2c\xf8\x01\x89\x41\xe7\xf4\xee\x14\x20\x93\x6b\x31\x61\x46\xcc\xda\x65\xc7\xa3\x79\xbd\xe9\x0d\x87\x02\xe0\x3b\xa7\xa0\xa6\x23\x35\xdc\xf7\x78\xc4\x2a\x36\x7d\x3c\xa2\x9d\x7b\xef\xa1\x0b\xd4\xe4\xe2\x3c\x68\xad\xe2\xde\x8c\x5e\x9f\xcf\xf8\x3f\xb2\x9d\x15\xd3\x17\x6c\xf7\xfe\x89\x5e\x7c\xe6\xa0\x81\x65\x15\x12\xee\x3a\x3b\xdb\x65\x27\x41\x43\x2e\x10\x09\x05\xbe\x30\x80\xb3\xc8\x84\x44\xc3\xdc\x4f\x76\x54\x71\xa6\x2d\x00\x75\xee\x81\x10\x59\x60\xad\x83\x65\xef\xc0\xda\xf5\x15\x01\x52\x35\x7e\x88\xee\x73\xc3\x7b\xf9\x12\x5c\x13\xa2\x11\x1d\x85\x87\x84\x75\x55\x8e\x5e\x8d\xc3\x4b\xff\x30\xc5\xaa\x28\x1f\xc5\x58\x63\x14\x62\x4a\x2a\x13\xc5\xdc\xb6\xed\xd9\x9d\x10\xd6\x8c\x6c\x8e\xc8\xa1\x39\xcb\x7b\x14\xfa\x27\xec\x02\xdc\x8b\x24\xb4\x90\xac\x60\xc3\xb0\x88\x19\x35\xcd\x9b\x5d\xb0\xc3\xae\x3b\xe8\x09\x53\x17\xc4\x34\xb6\xb8\x28\xd6\xaa\xd0\x52\x9b\x36\xfb\xff\xbf\x89\xc1\x59\x6c\xc6\x60\xf7\xdb\x90\x56\xaf\x63\x94\x9c\x85\xcc\xd5\x47\x14\x23\xa8\xc9\x00\x8e\x6e\x1b\x9f\xb2\xfa\x9a\x62\x68\xa0\x65\xed\x11\xad\x28\xa3\x77\x27\xee\xa0\xe7\x4c\xbe\xc7\xc5\x6d\x2e\x8b\x68\x8e\x0b\xfe\x8b\x12\xdf\x87\x75\x13\x36\x97\x86\xd9\xb1\x62\xcc\xe6\x92\xd5\x43\xdd\x18\x27\x61\x85\x1f\x1d\x30\x95\x42\x0a\x41\xaa\xac\x22\x4b\x59\xbe\x63\x6a\x97\x59\xb1\xf6\xfa\x5c\xfe\x47\x95\xd8\x79\xdb\xb3\x47\x74\x7a\x4c\xab\xa7\xb4\xd4\xff\x5d\xd8\x0d\xc3\xca\xc0\x44\x46\xef\xf9\xa3\x9e\x74\xd8\xa0\x1d\x4d\x2c\x67\x52\x71\x26\x05\x6f\xff\x01\x60\x53\x93\x63\x15\x0a\x36\x4d\xa4\x90\xe8\xad\x77\x26\x15\x76\x77\xed\xb6\x6d\x90\x33\xde\x19\x38\x6f\xc8\xc8\x34\xb1\xb8\x94\xad\x5b\xf7\xb2\x1b\x64\xc3\xb2\x8d\x92\x86\xc6\x16\x8a\xc6\x92\xdf\x46\x84\x58\x10\x4e\x59\xe8\x73\x17\x9d\xbc\x87\x1e\xad\x8e\x59\xb1\xe1\x73\x83\x96\x41\x18\x2f\x59\xcb\x48\xf6\xf1\x3f\x01\x00\x00\xff\xff\x32\x33\xa7\xb3\x1c\x06\x00\x00")

func OptionsLangsLocale_zhCnIniBytes() ([]byte, error) {
	return bindataRead(
		_OptionsLangsLocale_zhCnIni,
		"langs/locale_zh-cn.ini",
	)
}

func OptionsLangsLocale_zhCnIni() (*asset, error) {
	bytes, err := OptionsLangsLocale_zhCnIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "langs/locale_zh-cn.ini", size: 1564, mode: os.FileMode(420), modTime: time.Unix(1490606426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"langs/locale_en-us.ini": OptionsLangsLocale_enUsIni,
	"langs/locale_zh-cn.ini": OptionsLangsLocale_zhCnIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"options": &bintree{nil, map[string]*bintree{
				"langs": &bintree{nil, map[string]*bintree{
					"locale_en-us.ini": &bintree{OptionsLangsLocale_enUsIni, map[string]*bintree{}},
					"locale_zh-cn.ini": &bintree{OptionsLangsLocale_zhCnIni, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
